@inject IJSRuntime JsRuntime;
@inject DialogService DialogService;
@inject IServiceScopeFactory scopeFactory;

<style>

    #lista-carrinho::-webkit-scrollbar-thumb, .rz-dialog ::-webkit-scrollbar-thumb, .rz-scrollbars::-webkit-scrollbar-thumb, .rz-scrollbars ::-webkit-scrollbar-thumb {
        background: var(--rz-scrollbar-color);
        border: 4px solid rgba(0, 0, 0, 0);
        background-clip: padding-box;
        border-radius: var(--rz-scrollbar-border-radius);
        min-width: var(--rz-scrollbar-size);
        min-height: var(--rz-scrollbar-size);
    }

    #lista-carrinho::-webkit-scrollbar, .rz-dialog ::-webkit-scrollbar, .rz-scrollbars::-webkit-scrollbar, .rz-scrollbars ::-webkit-scrollbar {
        background-color: var(--rz-scrollbar-background-color);
        width: var(--rz-scrollbar-size);
        height: var(--rz-scrollbar-size);
    }

    #lista-carrinho::-webkit-scrollbar-corner, .rz-dialog ::-webkit-scrollbar-corner, .rz-scrollbars::-webkit-scrollbar-corner, .rz-scrollbars ::-webkit-scrollbar-corner {
        background-color: var(--rz-scrollbar-background-color);
    }

    .rz-timeline-point-primary {
        background-color: @((!string.IsNullOrEmpty(restaurante.CorPrimaria) ? restaurante.CorPrimaria : "var(--rz-primary)")) !important;
    }

    .produto-nome {
        font-weight: 800;
        font-size: 1rem;
        -webkit-line-clamp: 2;
        overflow: hidden;
        -webkit-box-orient: vertical;
    }

    .produto-descricao {
        color: rgb(127, 143, 159);
        font-size: 0.8rem;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        overflow: hidden;
        -webkit-box-orient: vertical;
    }

    .produto-valor {
        font-weight: 600;
        font-size: 1rem;
        line-height: 0.87rem;
        margin-top: 1rem;
    }

</style>

<div class="container">
    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center">
        <RadzenRow Style="height: 35vh">
            <RadzenTimeline LinePosition="LinePosition.Start">
                <Items>
                    @if (pedido.Status != Pedido.StatusPedido.Cancelado)
                    {
                        <RadzenTimelineItem PointStyle="@PointStyle.Primary" Text="@(Common.GetEnumDescription(Pedido.StatusPedido.Recebido))" />
                        <RadzenTimelineItem PointStyle="@(statusPedido[pedido.Status] >= 1 ? PointStyle.Primary : PointStyle.Base)" Text="@(Common.GetEnumDescription(Pedido.StatusPedido.EmAndamento))" />
                        <RadzenTimelineItem PointStyle="@(statusPedido[pedido.Status] >= 2 ? PointStyle.Primary : PointStyle.Base)" Text="@(Common.GetEnumDescription(Pedido.StatusPedido.Concluido))" />
                        <RadzenTimelineItem PointStyle="@(statusPedido[pedido.Status] >= 3 ? PointStyle.Primary : PointStyle.Base)" Text="@(Common.GetEnumDescription(Pedido.StatusPedido.Entregue))" />
                    }
                    else
                    {
                        <RadzenTimelineItem PointStyle="PointStyle.Danger" Text="@(Common.GetEnumDescription(Pedido.StatusPedido.Cancelado))" />
                    }
                </Items>
            </RadzenTimeline>
        </RadzenRow>
        <RadzenRow id="lista-carrinho" Style="height: 35vh; overflow-y: auto;">
            <RadzenDataList Data="pedidoProdutos" Density="Density.Compact" Style="width: 100%">
                <Template Context="pedidoProduto">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <div>
                            <div class="produto-nome">@(pedidoProduto.Quantidade)x @pedidoProduto.NomeProduto</div>
                            <div class="produto-valor" style="margin-top: 0.5rem">@pedidoProduto.ValorFormatado</div>
                            @if (!string.IsNullOrWhiteSpace(pedidoProduto.Observacao))
                            {
                                <div class="produto-descricao" style="margin-top: 0.5rem">Obs: @pedidoProduto.Observacao</div>
                            }
                        </div>
                    </RadzenStack>
                </Template>
            </RadzenDataList>
        </RadzenRow>
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="margin-top: 2rem">
            <RadzenButton Text="Fechar" Click="FechaPopup" />
        </RadzenRow>
    </RadzenStack>
</div>


@code {

    [Parameter]
    public ListaPedido listaPedido { get; set; }

    [Parameter]
    public Restaurante restaurante { get; set; }

    [Parameter]
    public Pedido pedido { get; set; }

    public List<PedidoProduto> pedidoProdutos { get; set; } = new List<PedidoProduto>();


    protected override void OnInitialized()
    {
        GetPedidoProdutos();
    }


    public void GetPedidoProdutos()
    {
        using(var scope = scopeFactory.CreateScope())
        {
            pedidoProdutos = scope.ServiceProvider.GetRequiredService<IPedidoProdutoRepository>().GetByPedidoId(pedido.Id).ToList();
        }
    }

    public Dictionary<Pedido.StatusPedido, int> statusPedido = new Dictionary<Pedido.StatusPedido, int>()
    {
        {Pedido.StatusPedido.Recebido, 0 },
        {Pedido.StatusPedido.EmAndamento, 1 },
        {Pedido.StatusPedido.Concluido, 2 },
        {Pedido.StatusPedido.Entregue, 3 },
    };

    public void FechaPopup()
    {
        DialogService.Close();
    }
}
