@inject IJSRuntime JsRuntime;
@inject DialogService DialogService;
@inject IServiceScopeFactory scopeFactory;

<style>

    .card-home i, .card-home h6 {
        color: var(--rz-text-color);
    }

    .card-home:hover, .card-home:hover i, .card-home:hover h6 {
        background-color: @((!string.IsNullOrEmpty(restaurante.CorPrimaria) ? restaurante.CorPrimaria : "var(--rz-primary)")) !important;
        color: var(--rz-header-color) !important;
        cursor: pointer !important;
    }

</style>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
    <RadzenLabel><h4>Home</h4></RadzenLabel>
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Text="Home" Icon="home" />
    </RadzenBreadCrumb>
</RadzenStack>

<RadzenStack>
    <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="4">
            <div onclick="redirecionaTela('/Pedido')">
                <RadzenCard Style="width: 100%;" Class="rz-border-radius-3 text-center card-home">
                    <RadzenIcon Icon="assignment" Style="font-size: 2.5rem;" />
                    <RadzenText TextStyle="TextStyle.Subtitle1">Pedidos</RadzenText>
                </RadzenCard>
            </div>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="4">
            <div onclick="redirecionaTela('/Produto')">
                <RadzenCard Style="width: 100%;" Class="rz-border-radius-3 text-center card-home">
                    <RadzenIcon Icon="inventory_2" Style="font-size: 2.5rem;" />
                    <RadzenText TextStyle="TextStyle.Subtitle1">Produtos</RadzenText>
                </RadzenCard>
            </div>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="4">
            <div onclick="redirecionaTela('/Mesa')">
                <RadzenCard Style="width: 100%;" Class="rz-border-radius-3 text-center card-home">
                    <RadzenIcon Icon="table_restaurant" Style="font-size: 2.5rem;" />
                    <RadzenText TextStyle="TextStyle.Subtitle1">Mesas</RadzenText>
                </RadzenCard>
            </div>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenLabel><b>Vendas realizadas no ano</b></RadzenLabel>
            <RadzenChart>
                <RadzenColumnSeries Data="@ValorVendas" CategoryProperty="Mes" Title="2024" LineType="LineType.Dashed" ValueProperty="Valor">
                    <RadzenSeriesDataLabels Visible="false" />
                </RadzenColumnSeries>
                <RadzenColumnOptions Radius="5" />
                <RadzenValueAxis Formatter="@FormataMoeda">
                    <RadzenGridLines Visible="true" />
                </RadzenValueAxis>
            </RadzenChart>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenLabel><b>Produtos mais pedidos no mês</b></RadzenLabel>
            <RadzenRow JustifyContent="JustifyContent.SpaceBetween">
                <div>
                    <RadzenLabel Text="Dt. Início" />
                    <RadzenDatePicker @bind-Value=@dataInicio DateFormat="dd/MM/yyyy" Change="AtualizaGraficoProdutos" />
                </div>
                <div>
                    <RadzenLabel Text="Dt. Fim" />
                    <RadzenDatePicker @bind-Value=@dataFim DateFormat="dd/MM/yyyy" Change="AtualizaGraficoProdutos" />
                </div>
            </RadzenRow>
            <RadzenChart>
                <RadzenPieSeries Data="@QuantidadesProdutos" CategoryProperty="Nome" ValueProperty="Quantidade" Title="Quantidade">
                    <RadzenSeriesDataLabels Visible="@false" />
                </RadzenPieSeries>
            </RadzenChart>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {

    [Parameter]
    public Restaurante restaurante { get; set; }

    public List<int> anoPedidos { get; set; } = new List<int>() { DateTime.Now.Year };
    public DateTime dataInicio { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    public DateTime dataFim { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1).AddDays(-1);

    QuantidadeProduto[] QuantidadesProdutos = new QuantidadeProduto[] { };

    protected override void OnInitialized()
    {
        AtualizaGraficoPedidos();
        AtualizaGraficoProdutos();
    }

    string FormataMoeda(object value)
    {
        return ((double)value).ToString("C", System.Globalization.CultureInfo.CreateSpecificCulture("pt-BR"));
    }

    public class ValorVendasMes
    {
        public decimal Valor { get; set; }
        public string Mes { get; set; }
    }

    public class QuantidadeProduto
    {
        public int Quantidade { get; set; }
        public string Nome { get; set; }
    }

    ValorVendasMes[] ValorVendas = new ValorVendasMes[] { };

    public void AtualizaGraficoPedidos()
    {
        using (var scope = scopeFactory.CreateScope())
        {
            var pedidos = scope.ServiceProvider.GetRequiredService<IPedidoProdutoRepository>().GetDashboard(restaurante.Id);
            ValorVendas = pedidos.GroupBy(g => g.Inclusao.Month).OrderBy(o => o.Key).Select(s => new ValorVendasMes()
            {
                Mes = new System.Globalization.CultureInfo("pt-BR").DateTimeFormat.GetAbbreviatedMonthName(s.Key).ToUpper().Replace(".", ""),
                Valor = s.Sum(sum => sum.Valor)
            }).ToArray();
        }
    }

    public void AtualizaGraficoProdutos()
    {
        using (var scope = scopeFactory.CreateScope())
        {
            if(dataInicio > dataFim)
            {
                var dateFim = dataInicio;
                dataInicio = dataFim;
                dataFim = dateFim;
            }

            var pedidos = scope.ServiceProvider.GetRequiredService<IPedidoProdutoRepository>().GetDashboard(restaurante.Id).Where(w => dataInicio <= w.Inclusao && w.Inclusao <= dataFim);
            QuantidadesProdutos = pedidos.GroupBy(g => g.Produto).Select(s => new QuantidadeProduto()
            {
                Nome = s.Key.Nome,
                Quantidade = s.Sum(sum => sum.Quantidade)
            }).ToArray();
        }
    }
}