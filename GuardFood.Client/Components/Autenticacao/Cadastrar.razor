@inject IJSRuntime JsRuntime;
@inject HttpClient httpClient;
@inject NotificationService notificationService;

<style>

    .rz-button {
        width: 100%;
    }

    i {
        /* Replace this with your icon styling */
        display: inline-block;
        width: 50px;
        height: 50px;
        color: var(--rz-primary);
        font-size: 24px;
        line-height: 50px;
        border-radius: 50%;
    }

    .or {
        position: relative;
        height: 2.2rem;
        line-height: 50px;
        text-align: center;
    }

        .or::before,
        .or::after {
            position: absolute;
            width: 40%;
            height: 1px;
            top: 24px;
            background-color: #aaa;
            content: '';
        }

        .or::before {
            left: 0;
        }

        .or::after {
            right: 0;
        }

    .button-secondary {
        background: white !important;
        width: 100% !important;
        color: grey !important;
        box-shadow: none !important;
        border: 1px solid black;
        border-radius: 28px !important;
        margin-top: 1rem
    }

        .button-secondary:hover {
            background: #dddddd !important;
            border: 1.5px solid black
        }

    @@media only screen and (max-width: 600px) {
        .rz-mob {
            width: 100% !important
        }
    }
</style>

<RadzenStack class="rz-p-0 rz-p-md-12">
    <RadzenCarousel @ref=carousel @bind-SelectedIndex="@selectedIndex" Auto="false" PagerOverlay="true" ButtonShade="Shade.Default" AllowNavigation="false" AllowPaging="false" >
        <Items>
            <RadzenCarouselItem>
                <RadzenColumn JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10 rz-mob" Style="background:white;width: 30%; max-width: 90vw; height: auto; overflow: hidden; margin: 0">
                    <RadzenColumn JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="background: white; padding-top:1rem">
                        <RadzenIcon Icon="restaurant" Class="rz-align-center" Style="align-items: center; width:100%; font-size:5rem;"></RadzenIcon> <!-- Added a class for centering -->
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="6" SizeSM="12">
                        <RadzenCard Class="rz-shadow-0 rz-border-radius-0">
                            <RadzenText TextStyle="TextStyle.DisplayH6" TextAlign="TextAlign.Center" TagName="TagName.H2" Class="rz-mb-6">
                                Primeiramente, preencha as informações do seu Restaurante
                            </RadzenText>
                            <RadzenTemplateForm TItem="FormCadastroRestauranteViewModel" Data=@model.Restaurante Submit=@SubmitRestaurante>
                                <RadzenStack Gap="1rem" Class="rz-p-4 rz-p-md-12" Style="padding: 0 !important">
                                    <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                                        <RadzenColumn Size="12" SizeMD="12">
                                            <RadzenFormField Text="Nome" Variant="Variant.Outlined" Style="width: 100%">
                                                <ChildContent>
                                                    <RadzenTextBox Name="RestauranteNome" @bind-Value=@model.Restaurante.Nome Style="display: block; width: 100%" MaxLength="100" AutoComplete="false" />
                                                    <RadzenRequiredValidator Component="RestauranteNome" Text="Nome é Obrigatório" Popup="true" Style="position: absolute" />
                                                </ChildContent>
                                            </RadzenFormField>
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center" RowGap="0.25rem">
                                        <RadzenColumn Size="12" SizeMD="6">
                                            <RadzenFormField Text="Telefone" Variant="Variant.Outlined">
                                                <ChildContent>
                                                <RadzenTextBox Name="Telefone" @bind-Value=@model.Restaurante.Telefone Style="display: block; width: 100%" MaxLength="100" AutoComplete="false" />
                                                <RadzenRequiredValidator Component="Telefone" Text="Telefone é Obrigatório" Popup="true" Style="position: absolute" />
                                                </ChildContent>
                                            </RadzenFormField>
                                        </RadzenColumn>
                                        <RadzenColumn Size="12" SizeMD="6">
                                            <RadzenFormField Text="Endereço" Variant="Variant.Outlined">
                                                <ChildContent>
                                                    <RadzenTextBox Name="Endereco" @bind-Value=@model.Restaurante.Endereco Style="display: block; width: 100%" MaxLength="100" AutoComplete="false" />
                                                    <RadzenRequiredValidator Component="Endereco" Text="Endereço é Obrigatório" Popup="true" Style="position: absolute" />
                                                </ChildContent>
                                            </RadzenFormField>
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenRow AlignItems="AlignItems.Center" Class="rz-mt-4">
                                        <RadzenColumn Size="12" SizeMD="12" Style="text-align:center">
                                            <RadzenButton ButtonType="ButtonType.Submit" Class="button-primary" Text="Prosseguir"></RadzenButton>
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenText Class="or">ou</RadzenText>
                                    <RadzenButton Click="@(args=> retornaLogin())" Class="button-secondary">
                                        <RadzenIcon Icon="account_circle" Style="color:black; padding-right:1rem"></RadzenIcon>
                                        Acessar
                                    </RadzenButton>
                                </RadzenStack>
                            </RadzenTemplateForm>
                        </RadzenCard>
                    </RadzenColumn>
                </RadzenColumn>
            </RadzenCarouselItem>

            <RadzenCarouselItem>
                <RadzenColumn JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10 rz-mob" Style="background:white;width: 30%; max-width: 90vw; height: auto; overflow: hidden; margin: 0">
                    <RadzenColumn JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="background: white; padding-top:1rem">
                        <RadzenIcon Icon="account_circle" Class="rz-align-center" Style="align-items: center; width:100%; font-size:5rem;"></RadzenIcon> <!-- Added a class for centering -->
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="6" SizeSM="12">
                        <RadzenCard Class="rz-shadow-0 rz-border-radius-0">
                            <RadzenText TextStyle="TextStyle.DisplayH6" TextAlign="TextAlign.Center" TagName="TagName.H2" Class="rz-mb-6">
                                Em seguida, preencha as informações do Usuário
                            </RadzenText>
                            <RadzenTemplateForm TItem="FormCadastroUsuarioViewModel" Data=@model.Usuario Submit=@SubmitUsuario>
                                <RadzenStack Gap="1rem" Class="rz-p-4 rz-p-md-12" Style="padding: 0 !important">
                                    <RadzenFormField Text="Nome" Variant="Variant.Outlined">
                                        <ChildContent>
                                            <RadzenTextBox Name="UsuarioNome" @bind-Value="@model.Usuario.Nome" />
                                            <RadzenRequiredValidator Component="UsuarioNome" Text="Nome é obrigatório" Popup="true" Style="position: absolute" />
                                        </ChildContent>
                                    </RadzenFormField>
                                    <RadzenFormField Text="E-mail" Variant="Variant.Outlined">
                                        <ChildContent>
                                            <RadzenTextBox Name="Email" @bind-Value="@model.Usuario.Email" AutoCompleteType="AutoCompleteType.Off" />
                                            <RadzenRequiredValidator Component="Email" Text="E-mail é obrigatório" Popup="true" Style="position: absolute" />
                                        </ChildContent>
                                    </RadzenFormField>
                                    <RadzenFormField Text="Senha" Variant="Variant.Outlined">
                                        <ChildContent>
                                            <RadzenTextBox Name="Senha" @bind-Value="@model.Usuario.Senha" Visible="@(!password)" AutoCompleteType="AutoCompleteType.Off" />
                                            <RadzenPassword Name="Senha" @bind-Value="@model.Usuario.Senha" Visible="@password" AutoCompleteType="AutoCompleteType.Off" />
                                            <RadzenRequiredValidator Component="Senha" Text="Senha é obrigatória" Popup="true" Style="position: absolute" />
                                        </ChildContent>
                                        <End>
                                            <RadzenButton Icon="@(password ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                                        </End>
                                    </RadzenFormField>
                                    <RadzenFormField Text="Confirmar Senha" Variant="Variant.Outlined">
                                        <ChildContent>
                                            <RadzenTextBox Name="ConfirmaSenha" @bind-Value="@model.Usuario.ConfirmaSenha" Visible="@(!confirmPassword)" />
                                            <RadzenPassword Name="ConfirmaSenha" @bind-Value="@model.Usuario.ConfirmaSenha" Visible="@confirmPassword" />
                                            <RadzenRequiredValidator Component="ConfirmaSenha" Text="Confirmar Senha é obrigatório" Popup="true" Style="position: absolute" />
                                            <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(model.Usuario.ConfirmaSenha)) Value=@model.Usuario.Senha Component="ConfirmaSenha" Text="As senhas devem ser iguais" Popup=true Style="position: absolute" />
                                        </ChildContent>
                                        <End>
                                            <RadzenButton Icon="@(confirmPassword ? "visibility" : "visibility_off")" Click="ToggleConfirmPassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                                        </End>
                                    </RadzenFormField>
                                    <RadzenRow AlignItems="AlignItems.Center" Class="rz-mt-4">
                                        <RadzenColumn Size="12" SizeMD="12" Style="text-align:center">
                                            <RadzenButton ButtonType="ButtonType.Submit" Class="button-primary" Text="Aceite e Cadastre-se"></RadzenButton>
                                        </RadzenColumn>
                                    </RadzenRow>
                                    <RadzenText Class="or">ou</RadzenText>
                                    <RadzenButton Click="@(args=> RetornaCadastroRestaurante())" Class="button-secondary">
                                        <RadzenIcon Icon="arrow_back" Style="color:black; padding-right:1rem"></RadzenIcon>
                                        Voltar
                                    </RadzenButton>
                                </RadzenStack>
                            </RadzenTemplateForm>
                        </RadzenCard>
                    </RadzenColumn>
                </RadzenColumn>
            </RadzenCarouselItem>
        </Items>
    </RadzenCarousel>
</RadzenStack>


@code {

    RadzenCarousel carousel;
    int selectedIndex;

    public FormCadastroViewModel model = new FormCadastroViewModel();

    void SubmitRestaurante(FormCadastroRestauranteViewModel model)
    {
        selectedIndex = 1;
    }

    void RetornaCadastroRestaurante()
    {
        selectedIndex = 0;
    }

    async void SubmitUsuario(FormCadastroUsuarioViewModel cadastro)
    {
        var retorno = await JsRuntime.InvokeAsync<RetornoViewModel>("getDados", "/Autenticacao/PostRestauranteUsuario", new { values = JsonConvert.SerializeObject(model) }, "POST");
        if (retorno.Sucesso)
        {
            await JsRuntime.InvokeVoidAsync("notifica", retorno.Sucesso ? "" : "Erro", retorno.Mensagem, retorno.Sucesso);
            await Task.Delay(1500);
            retornaLogin();
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("notifica", retorno.Sucesso ? "" : "Erro", retorno.Mensagem, retorno.Sucesso);
        }
    }

    async void OnLogin(LoginArgs args)
    {
        var retorno = await JsRuntime.InvokeAsync<RetornoViewModel>("realizaLogin", new AutenticacaoViewModel()
        {
            Usuario = args.Username,
            Senha = args.Password,
            Lembrar = args.RememberMe,
        });
        if (retorno.Sucesso)
        {
            await JsRuntime.InvokeVoidAsync("redirecionaTela", "/Home/Dashboard");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("notifica", "Erro:", retorno.Mensagem, false);
        }
    }

    bool password = true;
    bool confirmPassword = true;

    void TogglePassword()
    {
        password = !password;
    }

    void ToggleConfirmPassword()
    {
        confirmPassword = !confirmPassword;
    }

    async void retornaLogin()
    {
        await JsRuntime.InvokeVoidAsync("redirecionaTela", "/Login");
    }

}