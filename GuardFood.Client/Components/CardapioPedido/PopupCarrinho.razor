@using System.Linq.Dynamic.Core;
@inject IJSRuntime JsRuntime;
@inject DialogService DialogService;
@inject IServiceScopeFactory scopeFactory;

<style>

    #lista-carrinho::-webkit-scrollbar-thumb, .rz-dialog ::-webkit-scrollbar-thumb, .rz-scrollbars::-webkit-scrollbar-thumb, .rz-scrollbars ::-webkit-scrollbar-thumb {
        background: var(--rz-scrollbar-color);
        border: 4px solid rgba(0, 0, 0, 0);
        background-clip: padding-box;
        border-radius: var(--rz-scrollbar-border-radius);
        min-width: var(--rz-scrollbar-size);
        min-height: var(--rz-scrollbar-size);
    }

    #lista-carrinho::-webkit-scrollbar, .rz-dialog ::-webkit-scrollbar, .rz-scrollbars::-webkit-scrollbar, .rz-scrollbars ::-webkit-scrollbar {
        background-color: var(--rz-scrollbar-background-color);
        width: var(--rz-scrollbar-size);
        height: var(--rz-scrollbar-size);
    }

    #lista-carrinho::-webkit-scrollbar-corner, .rz-dialog ::-webkit-scrollbar-corner, .rz-scrollbars::-webkit-scrollbar-corner, .rz-scrollbars ::-webkit-scrollbar-corner {
        background-color: var(--rz-scrollbar-background-color);
    }

    .icone-produto {
        height: 100%;
        width: 100%;
        background-color: #eee;
        border-radius: 0.5rem;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .produto-descricao-popup {
        color: rgb(127, 143, 159);
        font-size: 0.8rem;
    }

    .label-observacao {
        font-weight: 800;
        font-size: 1.125rem;
        line-height: 1.688rem;
        letter-spacing: 0.01em;
        color: rgb(48, 51, 60);
    }

    .label-nome-celular {
        font-weight: 600;
        font-size: 1rem;
        line-height: 0.5rem;
        color: rgb(48, 51, 60);
    }

    .label-quantidade {
        font-weight: 500;
        font-size: 1.125rem;
        line-height: 1.688rem;
        letter-spacing: 0.01em;
        color: rgb(48, 51, 60);
    }
</style>

<div class="container">
    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center">
        <RadzenRow id="lista-carrinho" Style="height: 35vh; overflow: auto">
            <RadzenDataList Data="pedidoProdutos" Density="Density.Compact" EmptyText="Seu carrinho está vazio!" Style="width: 100%" ShowEmptyMessage="true">
                <Template Context="pedidoProduto">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                        <div class="produto-info">
                            <div class="produto-nome">@(pedidoProduto.Quantidade)x @pedidoProduto.NomeProduto</div>
                            <div class="produto-valor" style="margin-top: 0.5rem">@pedidoProduto.ValorFormatado</div>
                            @if (!string.IsNullOrWhiteSpace(pedidoProduto.Observacao))
                            {
                                <div class="produto-descricao" style="margin-top: 0.5rem">Obs: @pedidoProduto.Observacao</div>
                            }
                        </div>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                            @if (pedidoProduto.Quantidade == 1)
                            {
                                <RadzenButton Icon="delete" Click="() => RemovePedidoProduto(pedidoProduto)" />
                            }
                            else
                            {
                                <RadzenButton Icon="remove" Click="() => DiminuiQuantidade(pedidoProduto)" />
                            }
                            <span class="label-observacao">@(pedidoProduto.Quantidade)</span>
                            <RadzenButton Icon="add" Click="() => AumentaQuantidade(pedidoProduto)" />
                        </RadzenStack>
                    </RadzenStack>
                </Template>
            </RadzenDataList>
        </RadzenRow>
        <RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Style="width: 100%">
                <div class="produto-valor">Total:</div>
                <div class="produto-valor">@(pedidoProdutos.Sum(s => s.Valor).ToString("C", new System.Globalization.CultureInfo("pt-BR")))</div>
            </RadzenStack>
        </RadzenRow>
        <RadzenRow>
            <RadzenButton Text="Adicionar mais produtos" Click="FechaPopup" Variant="Variant.Outlined" Style="width: 100%" />
        </RadzenRow>
        <RadzenRow>
            <RadzenLabel Text="Nome e Sobrenome" class="label-nome-celular" />
            <RadzenTextBox @bind-Value="pedido.NomeCliente" Placeholder="Como vamos te chamar" Change="() => cardapioPedido.SalvaInfoPedido()" Style="width: 100%;" />
        </RadzenRow>
        <RadzenRow>
            <RadzenLabel Text="Número do seu celular" class="label-nome-celular" Style="" />
            <RadzenMask @bind-Value="pedido.Telefone" Mask="(**) *****-****" CharacterPattern="[0-9]" Change="() => cardapioPedido.SalvaInfoPedido()" Placeholder="(00) 00000-0000" Style="width: 100%;" />
        </RadzenRow>
        <RadzenRow JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="margin-top: 2rem">
            <RadzenButton Text="Fazer Pedido" Click="FazerPedido" Disabled="!pedidoProdutos.Any()" Style="width: 100%" />
        </RadzenRow>
    </RadzenStack>
</div>

@code {

    [Parameter]
    public CardapioPedido cardapioPedido { get; set; }

    [Parameter]
    public Restaurante restaurante { get; set; }

    [Parameter]
    public List<PedidoProduto> pedidoProdutos { get; set; }

    [Parameter]
    public Pedido pedido { get; set; }

    public void RemovePedidoProduto(PedidoProduto pedidoProduto)
    {
        pedidoProdutos.Remove(pedidoProduto);
        cardapioPedido.SalvaInfoPedido();
    }

    public void DiminuiQuantidade(PedidoProduto pedidoProduto)
    {
        pedidoProdutos.First(f => f.Id == pedidoProduto.Id).Quantidade--;
        cardapioPedido.SalvaInfoPedido();
    }

    public void AumentaQuantidade(PedidoProduto pedidoProduto)
    {
        pedidoProdutos.First(f => f.Id == pedidoProduto.Id).Quantidade++;
        cardapioPedido.SalvaInfoPedido();
    }

    public void FechaPopup()
    {
        cardapioPedido.AtualizaTelaPedido();
        DialogService.Close();
    }

    public async void RedirecionaStatusPedido(string tel)
    {
        await JsRuntime.InvokeVoidAsync("abreTela", $"/StatusPedido?restauranteId={restaurante.Id}&telefone={tel}");
    }

    public async void RecarregaTela()
    {
        await JsRuntime.InvokeVoidAsync("recarregaTela");
    }

    public async Task FazerPedido()
    {
        if (string.IsNullOrWhiteSpace(pedido.NomeCliente))
        {
            await JsRuntime.InvokeVoidAsync("notifica", "", "Preencha seu nome e sobrenome para prosseguir", false);
            return;
        }

        var telefone = "";
        var numeros = new List<char>() { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };

        foreach (var t in pedido.Telefone)
        {
            if (numeros.Contains(t))
            {
                telefone += t;
            }
        }

        if (telefone.Length != 11)
        {
            await JsRuntime.InvokeVoidAsync("notifica", "", "Preencha seu número de celular para prosseguir", false);
            return;
        }

        using (var scope = scopeFactory.CreateScope())
        {
            var popupConfirma = await DialogService.Confirm($"Deseja fazer o pedido?", "Fazer Pedido", new ConfirmOptions() { OkButtonText = "Sim", CancelButtonText = "Não" });
            if (popupConfirma == true)
            {
                pedido.Telefone = telefone;
                var retorno = scope.ServiceProvider.GetRequiredService<IPedidoRepository>().InserePedido(pedido, pedidoProdutos);

                if (retorno.Sucesso)
                {
                    pedidoProdutos.Clear();
                    cardapioPedido.SalvaInfoPedido();
                    await DialogService.OpenAsync($"Pedido Realizado", ds =>
                        @<RadzenStack JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Style="height: 75vh;">
                            <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4">
                                <span style=" font-size: 1rem; font-weight: 500;">Seu pedido foi realizado com sucesso!</span>
                            </RadzenRow>
                            <RadzenRow Gap="2rem" Class="rz-p-0 rz-p-lg-4" JustifyContent="JustifyContent.Center">
                                <RadzenButton Variant="Variant.Outlined" Text="Fazer outro pedido" Click="RecarregaTela" Style="width: 100%" />
                                <RadzenButton Text="Acompanhar Status do Pedido" Click="(args) => RedirecionaStatusPedido(telefone)" Style="width: 100%" />
                            </RadzenRow>
                        </RadzenStack>, new DialogOptions() { Width = "100vw", Height = "100vh", Resizable = false, Draggable = false, ShowClose = false });
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("notifica", "Erro", "Ocorreu um erro ao fazer o pedido", false);
                }
            }
        }
    }
}