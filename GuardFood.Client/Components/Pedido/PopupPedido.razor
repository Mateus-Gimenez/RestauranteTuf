@using System.Linq.Dynamic.Core;
@inject IJSRuntime JsRuntime;
@inject DialogService DialogService;
@inject IServiceScopeFactory scopeFactory;

<RadzenDataGrid Data="@produtos" Responsive="true" Style="max-height: calc(100vh - 25rem)">
    <Columns>
        <RadzenDataGridColumn TItem="PedidoProduto" Property="NomeProduto" Title="Produto" Filterable="false" Sortable="false" FilterOperator="FilterOperator.StartsWith">
            <FooterTemplate>
                <b>@produtos.Count</b> Itens
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="PedidoProduto" Property="Quantidade" Title="Quantidade" />
        <RadzenDataGridColumn TItem="PedidoProduto" Property="ValorUnitarioFormatado" Title="Valor Unitário" />
        <RadzenDataGridColumn TItem="PedidoProduto" Property="ValorFormatado" Title="Valor">
            <FooterTemplate>
                <b>Total: @produtos.Sum(s => s.Valor).ToString("C", new System.Globalization.CultureInfo("pt-BR"))</b>
            </FooterTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="PedidoProduto" Property="Observacao" Title="Observação" />
    </Columns>
</RadzenDataGrid>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Class="rz-mt-4">
        <RadzenButton Text="Dar Andamento" ButtonStyle="ButtonStyle.Success" Visible="(pedido?.Status == Pedido.StatusPedido.Recebido && pedido?.Status != Pedido.StatusPedido.Cancelado)" />
        <RadzenButton Text="Finalizar" ButtonStyle="ButtonStyle.Success" Visible="(pedido?.Status == Pedido.StatusPedido.EmAndamento && pedido?.Status != Pedido.StatusPedido.Cancelado)" />
        <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Danger" Visible="(pedido?.Status != Pedido.StatusPedido.Cancelado)" Click="() => CancelarPedido(pedido)" />
    </RadzenRow>
</RadzenStack>

@code {

    [Parameter]
    public Pedido pedido { get; set; }

    [Parameter]
    public DataGridPedido dataGridPedido { get; set; }

    List<PedidoProduto> produtos = new List<PedidoProduto>();

    protected override async Task OnInitializedAsync()
    {
        using (var scope = scopeFactory.CreateScope())
        {
            produtos = scope.ServiceProvider.GetRequiredService<IPedidoProdutoRepository>().GetByPedidoId(pedido.Id).ToList();
        }
        await base.OnInitializedAsync();
    }

    async Task CancelarPedido(Pedido objeto)
    {
        var popupConfirma = await DialogService.Confirm($"Deseja mesmo cancelar o pedido #{objeto.CodigoFormatado}?", "Cancelar Pedido", new ConfirmOptions() { OkButtonText = "Sim", CancelButtonText = "Não" });
        if (popupConfirma == true)
        {
            using (var scope = scopeFactory.CreateScope())
            {
                pedido.Status = Pedido.StatusPedido.Cancelado;
                var retorno = scope.ServiceProvider.GetRequiredService<IPedidoRepository>().CancelarPedido(objeto);
                if (retorno.Sucesso)
                {
                    await JsRuntime.InvokeVoidAsync("notifica", "", "Pedido Cancelado com sucesso", retorno.Sucesso);
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("notifica", retorno.Sucesso ? "" : "Erro", retorno.Mensagem, retorno.Sucesso);
                }
            }
            DialogService.Close();
            dataGridPedido.GetPedidos();
        }
    }

}
